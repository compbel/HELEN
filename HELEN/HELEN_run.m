function [vocInfer, vocSupport] = HELEN_run(fastafile,fastaref,k_min,k_max,nSol,timeLimit,outdirRes,outToken)

% HELEN_run runs HELEN (Heralding Emerging Lineages in Epistatic Network)
% algorithm to infer genomic variants with altered phenotypes from genomic
% data. For more information, see Mohebbi, Zelikovsky, Mangul, Chowell,
% Skums, Community structure and temporal dynamics of SARS-CoV-2 epistatic network allows for early detection of emerging variants with altered phenotypes
%
%
%   input:  fastafile      fasta file with viral sequences
%           fastaref       fastafile with the reference
%           k_min          minimal size of a densest candidate subgraph to be generated by HELEN
%           k_max          maximal size of a densest candidate subgraph to be generated by HELEN 
%           nSol           the number of densest subgraphs of a given size k (k_min <= k <= k_max) that are not contained in densest subgraphs of higher sizes
%                          generated by HELEN
%           timeLimit      time limit (in seconds) for each ILP solver execution by HELEN
%           outdirRes      output directory, where intermediate HELEN results are saved. Set outdirRes = [], if saving of intermediate results is not required
%           outToken       an identifier to be attached to each saved output file (can be set if outdirRes ~= [])
%
%  output:  vocInfer       a cell array of inferred genomic variants. Each variant is represented by an array of genomic positions defining this variant  
%           vocSupport    vector of support values for inferred variants
%
%  Example: [vocInfer, vocSupport] = HELEN_run('myData.fas','ref.fas',7,27,100,20000,'HELEN_results','myData')

% Pavel Skums 03/28/2023  
% Department of Computer Science, Georgia State University


seqF = fastaread(fastafile);
seq = char(seqF.Sequence);
refF = fastaread(fastaref);
ref = char(refF.Sequence);
seq = fillGaps(seq,ref);
M = getMutMatr(seq,ref);
M = sparse(M);
E = constructEpisNetwork(M,0.05);
if ~isempty(outdirRes)
    outfile = [outdirRes filesep 'edges_' outToken ' .mat'];
    save(outfile,'E');
end
nMut = size(M,2);
G = graph(E(:,1),E(:,2));
if max(max(E)) < nMut
    G = addnode(G,nMut - max(max(E)));
end
outdirInfer = [outdirRes filesep 'Inferred_variants'];
[vocInfer, vocSupport] = HELEN_infer(G,k_min,k_max,nSol,timeLimit,outdirInfer,outToken);
